;;;;;;
;;;;;; windows
;;;;;;
(defwindow info
	:monitor 0 
	:geometry (geometry
		:x "10px"
		:y "10px"
		:width "100px"
		:height "50px"
		:anchor "bottom left"
	)
	:stacking "bg"
	:exclusive false
	:focusable false
	:windowtype "dock"
	:wm-ignore true
  (info)
)

(defwindow time
    :monitor 0 
	:geometry (geometry
		:x "0px"
		:y "0%"
		:width "400px"
		:height "150px"
		:anchor "bottom center"
	)
	:stacking "bg"
	:exclusive false
	:focusable false
	:windowtype "dock"
	:wm-ignore true
  (timedate)
 )
(defwindow topbar
	:monitor 0
	:geometry (geometry
		:x "0px"
		:y "5px"
		:width "99%"
		:height "20px"
		:anchor "top center"
	)
	:stacking "fg"
	:exclusive true
	:focusable false
	:reserve (struts :distance "40px" :side "top")
	:windowtype "dock"
	:wm-ignore false
	(workspace)
)

(defwindow topbar-monitor-two
	:monitor 1
	:geometry (geometry
		:x "0px"
		:y "5px"
		:width "99%"
		:height "20px"
		:anchor "top center"
	)
	:stacking "fg"
	:exclusive true
	:focusable false
	:reserve (struts :distance "40px" :side "top")
	:windowtype "dock"
	:wm-ignore false
	(workspace)
)
;;;;;;
;;;;;; widgets
;;;;;;
; (defwidget info[]
; 	(box
; 		:orientation "v"
; 		:class "inf"
; 		(bat)
; 		(net)
; 		
; 	)
; )
(defwidget bat []
	(box :orientation "v"
		:class "battery-container"
		(circular-progress
			:class "battery-charge"
			:value {EWW_BATTERY.BAT0.capacity}	
			:start-at 0
			:thickness 10
			:clockwise false
		)

		(label
			:class "battery-percent"
			:text "${EWW_BATTERY.BAT0.capacity}%"
		)
		(label
			:class "battery-title"
			:text "BATTERY"
		)
	)
)


(defwidget workspace []
	(literal :content ws)
)
(defwidget info []
	(literal :content ewwinfo)
)

(defwidget timedate []
  (box :class "time-date"
    :orientation "v"
    (label :class "clock" :text time)
    (label :class "date" :text date)
  )
)

;;;;;;
;;;;;; variables
;;;;;;

(deflisten ws
	`hyprgo -w`
)
(deflisten ewwinfo 
	`ewwinfo`
)
(defpoll time :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `date +%H:%M:%S`)

(defpoll date :interval "600s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `date +%Y-%m-%d`)


(defpoll netif :interval "3s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `nmcli device show wlp2s0 | awk '/GENERAL.CONNECTION/ {print $2}'`)

