;;;;;;
;;;;;; windows
;;;;;;
(defwindow info
	:monitor 0 
	:geometry (geometry
		:x "10px"
		:y "10px"
		:width "100px"
		:height "100px"
		:anchor "bottom left"
	)
	:stacking "bg"
	:exclusive false
	:focusable false
	:windowtype "dock"
	:wm-ignore true
(info)

)
(defwindow time
    :monitor 0 
	:geometry (geometry
		:x "000px"
		:y "10%"
		:width "400px"
		:height "400px"
		:anchor "center center"
	)
	:stacking "bg"
	:exclusive false
	:focusable false
	:windowtype "dock"
	:wm-ignore true
  (clocktime)
 )
(defwindow topbar
	:monitor 0
	:geometry (geometry
		:x "0px"
		:y "5px"
		:width "99%"
		:height "20px"
		:anchor "top center"
	)
	:stacking "fg"
	:exclusive true
	:focusable false
	:reserve (struts :distance "40px" :side "top")
	:windowtype "dock"
	:wm-ignore false
	(workspace)
)

(defwindow topbar-monitor-two
	:monitor 1
	:geometry (geometry
		:x "0px"
		:y "5px"
		:width "99%"
		:height "20px"
		:anchor "top center"
	)
	:stacking "fg"
	:exclusive true
	:focusable false
	:reserve (struts :distance "40px" :side "top")
	:windowtype "dock"
	:wm-ignore false
	(workspace)
)
;;;;;;
;;;;;; widgets
;;;;;;
(defwidget info[]
	(box
		:orientation "v"
		:class "inf"
		(bat)
		(net)
		
	)
)
(defwidget bat []
	(box :orientation "v"
		:class "battery-container"
		(circular-progress
			:class "battery-charge"
			:value {EWW_BATTERY.BAT0.capacity}	
			:start-at 0
			:thickness 10
			:clockwise false
		)

		(label
			:class "battery-percent"
			:text "${EWW_BATTERY.BAT0.capacity}%"
		)
		(label
			:class "battery-title"
			:text "BATTERY"
		)
	)
)
(defwidget net []
	(box :orientation "v"
		:class "network-container"
		(box 
			:orientation "h" 
			:class "network-speeds"

			(label
				:class "network-up"
				:text "${EWW_NET.wlp2s0.up}"	
			)
			(label
				:class "network-down"
				:text "${EWW_NET.wlp2s0.down}"	
			)
		)
		(label
			:class "network-title"
			:text "NETWORK"
		)
	)
)

; (defwidget workspace []
; 	(box 
; 		:class "workspace"
; 		ws
; 	)

; )

(defwidget workspace []
	(literal :content ws)
)

(defwidget clocktime []
  (label :class "clocktime" :text time)
)

;;;;;;
;;;;;; variables
;;;;;;

(deflisten ws
	`hyprgo -w`
)
(defpoll time :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `date +%H:%M:%S`)
